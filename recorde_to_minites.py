# -*- coding: utf-8 -*-
"""recorde_to_minites.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j1FuqbvekLKTJwGEvdWZsmlWIkOw1tyu
"""

!pip install openai
!pip install moviepy
!brew install ffmpeg
!pip install pydub
!pip install python-dotenv

!apt install -y python3-pyaudio
!pip install pyaudio

import os
import time
import openai
import moviepy.editor as mp
from pydub import AudioSegment
from dotenv import load_dotenv

openai.api_key = "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"

#mp3ファイルを文字起こしし、テキストを返す
def transcribe_audio(mp3_file_path):
    with open(mp3_file_path, 'rb') as audio_file:
        transcription = openai.Audio.transcribe("whisper-1", audio_file, language='ja')

    return transcription.text

#テキストを保存
def save_text_to_file(text, output_file_path):
    with open(output_file_path, 'w', encoding='utf-8') as f:
        f.write(text)

def split_audio(mp3_file_path, interval_ms, output_folder):
    audio = AudioSegment.from_file(mp3_file_path)
    file_name, ext = os.path.splitext(os.path.basename(mp3_file_path))

    mp3_file_path_list = []

    n_splits = len(audio) // interval_ms
    for i in range(n_splits + 1):
        # 開始、終了時間
        start = i * interval_ms
        end = (i + 1) * interval_ms
        # 分割
        split = audio[start:end]
        # 出力ファイル名
        output_file_name = os.path.join(output_folder, file_name + "_" + str(i) + ".mp3")
        # 出力
        split.export(output_file_name, format="mp3")

        # 音声ファイルリストに追加
        mp3_file_path_list.append(output_file_name)

    # 音声ファイルリストを出力
    return mp3_file_path_list

mp3_file_path = "drive/MyDrive/GoogleColaboratory_test/test_recorde"
output_folder = "drive/MyDrive/GoogleColaboratory_test/output"

from IPython.display import display, Javascript
from google.colab.output import eval_js
from base64 import b64decode
from google.colab import drive

def record_audio(filename='/content/drive/MyDrive/audio.mp3'):
    """Record audio from the browser's microphone until the Enter key is pressed."""
    # JavaScript code to record audio
    js_code = """
    async function recordAudio() {
      const audio = await navigator.mediaDevices.getUserMedia({ audio: true });
      const recorder = new MediaRecorder(audio);
      const chunks = [];

      recorder.ondataavailable = event => chunks.push(event.data);

      recorder.start();
      await new Promise(resolve => {
        window.addEventListener("keydown", function onKeydown(event) {
            if (event.key === "Enter") {
                recorder.stop();
                window.removeEventListener("keydown", onKeydown);
                resolve();
            }
        });
      });

      await new Promise(resolve => recorder.onstop = resolve);
      const blob = new Blob(chunks, { type: 'audio/wav' });
      const arrayBuffer = await new Response(blob).arrayBuffer();
      const base64Audio = btoa(new Uint8Array(arrayBuffer).reduce((data, byte) => data + String.fromCharCode(byte), ''));
      return base64Audio;
    }
    recordAudio()
    """

    audio_base64 = eval_js(js_code)
    audio_bytes = b64decode(audio_base64)

    # Save to a file
    with open(filename, 'wb') as f:
        f.write(audio_bytes)

    return filename

# Mount Google Drive
drive.mount('/content/drive/')

print("録音を開始しました。Enterキーを押して終了します...")
recorded_file = record_audio(mp3_file_path)
print(f"録音が終了しました。ファイルはこちらに保存されました: {recorded_file}")

interval_ms = 480_000 # 60秒 = 60_000ミリ秒

mp3_file_path_list = split_audio(mp3_file_path, interval_ms, output_folder)

transcription_list = []
for mp3_file_path in mp3_file_path_list:
    transcription = transcribe_audio(mp3_file_path)

    transcription_list.append(transcription)

    output_file_path = os.path.splitext(mp3_file_path)[0] + '_transcription.txt'

pre_summary = ""
for transcription_part in transcription_list:
    prompt = """
    あなたは、プロの要約作成者です。
    以下の制約条件、内容を元に要点をまとめてください。

    # 制約条件
    ・要点をまとめ、簡潔に書いて下さい。
    ・誤字・脱字があるため、話の内容を予測して置き換えてください。

    # 内容
    """ + transcription_part

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {'role': 'user', 'content': prompt}
        ],
        temperature=0.0,
    )

    pre_summary += response['choices'][0]['message']['content']

    time.sleep(60)

prompt = """
あなたは、プロの議事録作成者です。
以下の制約条件、内容を元に要点をまとめ、議事録を作成してください。

# 制約条件
・要点をまとめ、簡潔に書いて下さい。
・誤字・脱字があるため、話の内容を予測して置き換えてください。
・見やすいフォーマットにしてください。

# 内容
""" + pre_summary

print("議事録を作成中です...")
response = openai.ChatCompletion.create(
    #model="gpt-3.5-turbo",     # 4K_version: input[$0.0015 / 1K tokens],	output[$0.002 / 1K tokens]
    model="gpt-3.5-turbo-16k",  #	16kversion: input[$0.003 / 1K tokens],	output[$0.004 / 1K tokens]
    messages=[
        {'role': 'user', 'content': prompt}
    ],
    temperature=0.0,
)

output_file_path = os.path.splitext(mp3_file_path)[0] + '_mitunes.txt'
save_text_to_file(response['choices'][0]['message']['content'], output_file_path)

